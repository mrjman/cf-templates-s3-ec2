AWSTemplateFormatVersion: 2010-09-09

Metadata:
  Author: Mondo Robot

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Github
        Parameters:
          - GithubOwnerAccount
          - GithubOAuthToken
          - GithubRepo
          - GithubBranch
      - Label:
          default: Website
        Parameters:
          - Domain
          - SiteBucketName
          - IndexDocument
          - ErrorDocumentPath
          - CertificateArn
          - PriceClass
      - Label:
          default: CodePipeline/CodeBuild
        Parameters:
          - PipelineBucket
          - PipelineName
          - BuildType
          - BuildComputeType
          - BuildImage
          - ApiBaseUrl
          - ApiMenuUrl
          - ApiNavMenuUrl
          - ApiMediaUrl
          - ApiArtistsUrl
          - CdnUrl
      - Label:
          default: Lambda@Edge Parameters
        Parameters:
          - LambdaFunctionDescription
          - LambdaLogsRetentionInDays

Parameters:
  ApiBaseUrl:
    Description: Base api url
    Default: 'http://coach-Publi-19PDRRQWNG4UK-713229067.us-east-1.elb.amazonaws.com/wp-json/wp/v2'
    Type: String
  ApiMenuUrl:
    Description: Menu api url
    Default: 'http://coach-Publi-19PDRRQWNG4UK-713229067.us-east-1.elb.amazonaws.com/wp-json/wp-api-menus/v2/menus'
    Type: String
  ApiNavMenuUrl:
    Description: Main nav api url
    Default: 'http://coach-Publi-19PDRRQWNG4UK-713229067.us-east-1.elb.amazonaws.com/wp-json/wp-api-menus/v2/menu-locations'
    Type: String
  ApiMediaUrl:
    Description: Media url
    Default: 'http://coach-Publi-19PDRRQWNG4UK-713229067.us-east-1.elb.amazonaws.com/wp-content/uploads'
    Type: String
  ApiArtistsUrl:
    Description: Arists data url
    Default: 'https://s3.amazonaws.com/goeventweb-static.greencopper.com/8b22db9b97ce4d4b864a42f401f87e73/coachella-2018/data/eng/artists.json'
    Type: String
  BuildImage:
    Description: Build machine image
    Default: 'aws/codebuild/nodejs:10.1.0'
    Type: String
  BuildComputeType:
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE
    Description: Build machine compute type
    Default: BUILD_GENERAL1_SMALL
    Type: String
  BuildType:
    AllowedValues:
      - LINUX_CONTAINER
      - WINDOWS_CONTAINER
    Description: Build machine type
    Default: LINUX_CONTAINER
    Type: String
  CertificateArn:
    Description: The ACM certificate to use
    Type: String
  CdnUrl:
    Description: CDN url for public assets
    Default: 'https://d1xidugad9lo1d.cloudfront.net'
    Type: String
  Domain:
    Description: The domain for the website
    Type: String
  ErrorDocumentPath:
    Description: The error document
    Default: /404.html
    Type: String
  IndexDocument:
    Description: The root document of directory
    Default: index.html
    Type: String
  GithubOwnerAccount:
    Description: Github owner account. Can be found in github url /<owner>/<repo>
    Default: mondorobot
    Type: String
  GithubBranch:
    Description: Github branch
    Default: develop
    Type: String
  GithubOAuthToken:
    Description: Personal access token attached to the github account for repo access
    NoEcho: true
    Type: String
  GithubRepo:
    Default: coa.website
    Description: Githut repo name. Can be found in github url /<owner>/<repo>
    Type: String
  LambdaFunctionDescription:
    Description: The description for the lambda FunctionName
    Type: String
  LambdaLogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  PipelineBucket:
    Description: The bucket name to store pipeline artifacts
    Default: ''
    Type: String
  PipelineName:
    Description: The name of the code pipeline
    Default: coachella-static-pipeline
    Type: String
  PriceClass:
    AllowedValues:
      - PriceClass_100
      - PriceClass_200
      - PriceClass_All
    Description: The price class that corresponds to which edge servers are used.
    Default: PriceClass_All
    Type: String
  SiteBucketName:
    Description: The name to use when generating the S3 bucket for the static site
    Default: coachella-static
    Type: String

Conditions:
  HasDomain: !Not [ !Equals [ '', !Ref Domain ] ]
  NoPipelineBucket: !Equals [ '', !Ref PipelineBucket ]
  NoSiteBucketName: !Equals [ '', !Ref SiteBucketName ]
  UseDefaultCert: !Equals [ '', !Ref CertificateArn ]

Resources:
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
          - !If [ HasDomain, !Ref Domain, !Ref 'AWS::NoValue' ]
        ViewerCertificate:
          AcmCertificateArn: !If [ UseDefaultCert, !Ref 'AWS::NoValue', !Ref CertificateArn ]
          CloudFrontDefaultCertificate: !If [ UseDefaultCert, true, !Ref 'AWS::NoValue' ]
          SslSupportMethod: !If [ UseDefaultCert, !Ref 'AWS::NoValue', 'sni-only' ]
        CustomErrorResponses:
          - ErrorCode: 403 # not found
            ResponseCode: 404
            ResponsePagePath: !Ref ErrorDocumentPath
        DefaultCacheBehavior:
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          LambdaFunctionAssociations:
            - EventType: 'origin-request'
              LambdaFunctionARN: !GetAtt Lambda.Outputs.VersionArn
          MinTTL: 0
          TargetOriginId: s3origin
          ViewerProtocolPolicy: !If [ UseDefaultCert, 'allow-all', 'redirect-to-https']
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !Sub ${S3SiteBucket.DomainName}
            Id: s3origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        PriceClass: !Ref PriceClass
  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub CloudFront OAI for ${S3SiteBucket}
  CodeBuild:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: !Ref BuildComputeType
        EnvironmentVariables:
          - Name: NUXT_ENV_API_BASE_URL
            Value: !Ref ApiBaseUrl
            Type: PLAINTEXT
          - Name: NUXT_ENV_API_MENUS_URL
            Value: !Ref ApiMenuUrl
            Type: PLAINTEXT
          - Name: NUXT_ENV_API_NAVMENU_URL
            Value: !Ref ApiNavMenuUrl
            Type: PLAINTEXT
          - Name: NUXT_ENV_API_MEDIA_URL
            Value: !Ref ApiMediaUrl
            Type: PLAINTEXT
          - Name: NUXT_ENV_CDN_URL
            Value: !Ref CdnUrl
            Type: PLAINTEXT
          - Name: NUXT_ENV_GC_ARTISTS
            Value: !Ref ApiArtistsUrl
            Type: PLAINTEXT
        Image: !Ref BuildImage
        Type: !Ref BuildType
      Name: !Sub ${AWS::StackName}-CodeBuild
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Installing NPM packages
                - npm install
            build:
              commands:
                - echo Build started on `date`
                - npm run generate
            post_build:
              commands:
                # sync contents to S3
                - aws s3 sync --delete dist/ s3://${S3SiteBucket}/
                # set cache-control headers for non html files
                - >
                  aws s3 cp s3://${S3SiteBucket}/ s3://${S3SiteBucket}/
                  --exclude "*.html" --recursive --metadata-directive REPLACE
                  --cache-control="max-age=31536000, public"
                # set cache-control headers for html files
                - >
                  aws s3 cp s3://${S3SiteBucket}/ s3://${S3SiteBucket}/
                  --exclude "*" --include "*.html" --recursive --metadata-directive REPLACE
                  --cache-control="max-age=0, no-cache, no-store, must-revalidate"
          artifacts:
            files:
              - '**/*'
            base-directory: dist
  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'codebuild.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                  - 's3:PutObject'
                Resource:
                  - !GetAtt CodePipelineBucket.Arn
                  - !Join [ '', [ !GetAtt CodePipelineBucket.Arn, '/*' ] ]
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                  - 's3:ListBucket'
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                  - 's3:DeleteObject'
                  - 's3:DeleteObjectVersion'
                Resource:
                  - !GetAtt S3SiteBucket.Arn
                  - !Join [ '', [ !GetAtt S3SiteBucket.Arn, '/*' ] ]
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'cloudfront:CreateInvalidation'
                Resource:
                  - '*'
  CodePipelineBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !If [ NoPipelineBucket, !Ref 'AWS::NoValue', !Ref PipelineBucket ]
  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      ArtifactStore:
        Location: !Ref CodePipelineBucket
        Type: S3
      Name: !Ref PipelineName
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Branch: !Ref GithubBranch
                Owner: !Ref GithubOwnerAccount
                Repo: !Ref GithubRepo
                OAuthToken: !Ref GithubOAuthToken
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: AppSource
              Name: SourceAction
        - Name: Build
          Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuild
              InputArtifacts:
                - Name: AppSource
              OutputArtifacts:
                - Name: AppBuild
              Name: BuildAction
  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                  - 's3:PutObject'
                Resource:
                  - !GetAtt CodePipelineBucket.Arn
                  - !Join [ '', [ !GetAtt CodePipelineBucket.Arn, '/*' ] ]
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
  CodePipelineGithubWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      AuthenticationConfiguration:
        SecretToken: !Ref GithubOAuthToken
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref CodePipeline
      TargetAction: SourceAction
      Name: !Join [ '-', [ !Ref CodePipeline, 'github-webhook' ] ]
      TargetPipelineVersion: !GetAtt CodePipeline.Version
      RegisterWithThirdParty: true
  CodePipelineExternalWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: UNAUTHENTICATED
      AuthenticationConfiguration: {}
      Filters:
        - JsonPath: '$.branch'
          MatchEquals: '{Branch}'
      TargetPipeline: !Ref CodePipeline
      TargetAction: SourceAction
      Name: !Join [ '-', [ !Ref CodePipeline, 'wp-webhook' ] ]
      TargetPipelineVersion: !GetAtt CodePipeline.Version
  Lambda:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Parameters:
        FunctionDescription: !Ref LambdaFunctionDescription
        IndexDocument: !Ref IndexDocument
        LogsRetentionInDays: !Ref LambdaLogsRetentionInDays
      TemplateURL: https://s3.amazonaws.com/cf-coachella/static-site/lambda-edge-urls.yaml
  S3SiteBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !If [ NoSiteBucketName, !Ref 'AWS::NoValue', !Ref SiteBucketName ]
  S3SiteBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3SiteBucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3SiteBucket}/*'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

Outputs:
  WebsiteUrl:
    Description: Static website url
    Value: !If [ HasDomain, !Sub 'https://${Domain}', !Sub 'https://${CloudFrontDistribution.DomainName}' ]
  WebsiteBucket:
    Description: The bucket holding the static website
    Value: !Ref S3SiteBucket
  PipelineBucket:
    Description: The bucket holding the code pipeline artifacts
    Value: !Ref CodePipelineBucket
  DistributionId:
    Description: CloudFront Distribution Id
    Value: !Ref CloudFrontDistribution
  WordpressWebhookUrl:
    Description: Webhook URL for pushing change notifications from wordpress
    Value: !GetAtt CodePipelineExternalWebhook.Url
