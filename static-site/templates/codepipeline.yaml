---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  Creates codepipeline CI for deploying Coachella static site. Generates a codepipeline
  with a codebuild and links it to a github repository. Also creates an additional webhook
  url that is used by WordPress server to trigger rebuilds when content changes.

Metadata:
  Author: Mondo Robot

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Website Parameters
        Parameters:
          - WebsiteBucketName
          - WebsiteBucketArn
      - Label:
          default: Github Parameters
        Parameters:
          - GithubOwnerAccount
          - GithubOAuthToken
          - GithubRepo
          - GithubBranch
      - Label:
          default: CodePipeline/CodeBuild Parameters
        Parameters:
          - PipelineBucket
          - PipelineName
          - BuildType
          - BuildComputeType
          - BuildImage
          - ApiBaseUrl
          - ApiPostsUrl
          - ApiMenuUrl
          - ApiNavMenuUrl
          - ApiMediaUrl
          - ApiArtistsUrl
          - ApiArtistMediaUrl
    ParameterLabels:
      ApiArtistsUrl:
        default: Artists API URL
      ApiArtistMediaUrl:
        default: Artists API Media URL
      ApiBaseUrl:
        default: Base API URL
      ApiMenuUrl:
        default: Menu API URL
      ApiNavMenuUrl:
        default: Nav Menu API URL
      ApiPostsUrl:
        default: Posts API URL
      BuildComputeType:
        default: Build Compute Instance Type
      BuildImage:
        default: Build Image
      BuildType:
        default: Build Machine Type
      GithubBranch:
        default: GitHub Branch
      GithubOAuthToken:
        default: GitHub OAuth Token
      GithubOwnerAccount:
        default: GitHub Owner Account (Can be found in github url /<owner>/<repo>)
      GithubRepo:
        default: GitHub Repository (Can be found in github url /<owner>/<repo>)
      PipelineBucket:
        default: CodePipeline S3 Bucket Name
      PipelineName:
        default: CodePipeline Name
      WebsiteBucketArn:
        default: Website S3 Bucket ARN
      WebsiteBucketName:
        default: Website S3 Bucket Name

Parameters:
  ApiArtistsUrl:
    Default: 'https://s3.amazonaws.com/goeventweb-static.greencopper.com/8b22db9b97ce4d4b864a42f401f87e73/coachella-2018/data/eng/artists.json'
    Description: Arists data url
    Type: String
  ApiArtistMediaUrl:
    Default: 'https://goevent-images.s3.amazonaws.com/coachella-2018/1958aa84/web'
    Description: Arists data url
    Type: String
  ApiBaseUrl:
    Description: Base api url
    Type: String
  ApiMenuUrl:
    Description: Menu api url
    Type: String
  ApiNavMenuUrl:
    Description: Main nav api url
    Type: String
  ApiMediaUrl:
    Description: Media url
    Type: String
  ApiPostsUrl:
    Description: Posts api url
    Type: String
  BuildComputeType:
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE
    Default: BUILD_GENERAL1_SMALL
    Description: Build machine compute type
    Type: String
  BuildImage:
    Default: 'aws/codebuild/nodejs:10.1.0'
    Description: Build machine image
    Type: String
  BuildType:
    AllowedValues:
      - LINUX_CONTAINER
      - WINDOWS_CONTAINER
    Default: LINUX_CONTAINER
    Description: Build machine type
    Type: String
  GithubBranch:
    Description: Github branch
    Default: develop
    Type: String
  GithubOAuthToken:
    Description: Personal access token attached to the github account for repo access
    NoEcho: true
    Type: String
  GithubOwnerAccount:
    Description: Github owner account. Can be found in github url /<owner>/<repo>
    Default: mondorobot
    Type: String
  GithubRepo:
    Default: coa.website
    Description: Githut repo name. Can be found in github url /<owner>/<repo>
    Type: String
  PipelineBucket:
    Default: ''
    Description: The bucket name to store pipeline artifacts
    Type: String
  PipelineName:
    Default: coachella-static-pipeline
    Description: The name of the code pipeline
    Type: String
  WebsiteBucketArn:
    Description: The ARN of the S3 bucket where the static site is stored
    Type: String
  WebsiteBucketName:
    Description: The name of the S3 bucket where the static site is stored
    Type: String

Conditions:
  HasPipelineBucket: !Not [ !Equals [ '', !Ref PipelineBucket ] ]

Resources:
  CodeBuild:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Location: !Sub ${CodePipelineBucket}/cache/archives
        Type: S3
      Environment:
        ComputeType: !Ref BuildComputeType
        EnvironmentVariables:
          - Name: NUXT_ENV_API_BASE_URL
            Value: !Ref ApiBaseUrl
            Type: PLAINTEXT
          - Name: NUXT_ENV_API_MENUS_URL
            Value: !Ref ApiMenuUrl
            Type: PLAINTEXT
          - Name: NUXT_ENV_API_NAVMENU_URL
            Value: !Ref ApiNavMenuUrl
            Type: PLAINTEXT
          - Name: NUXT_ENV_API_MEDIA_URL
            Value: !Ref ApiMediaUrl
            Type: PLAINTEXT
          - Name: NUXT_ENV_API_POSTS_URL
            Value: !Ref ApiPostsUrl
            Type: PLAINTEXT
          - Name: NUXT_ENV_GC_ARTISTS
            Value: !Ref ApiArtistsUrl
            Type: PLAINTEXT
          - Name: NUXT_ENV_GC_IMAGES
            Value: !Ref ApiArtistMediaUrl
            Type: PLAINTEXT
        Image: !Ref BuildImage
        Type: !Ref BuildType
      Name: !Sub ${AWS::StackName}-CodeBuild
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Installing NPM packages
                - npm install
            build:
              commands:
                - echo Build started on `date`
                - npm run generate
            post_build:
              commands:
                # skip post_build if previous step fails
                - |
                  if [ $CODEBUILD_BUILD_SUCCEEDING -ne 1 ]; then
                    echo 'Build failed - skipping post_build' && exit 1
                  fi
                # sync contents to S3
                - aws s3 sync --delete dist/ s3://${WebsiteBucketName}/
                # set cache-control headers for non html files
                - >
                  aws s3 cp s3://${WebsiteBucketName}/ s3://${WebsiteBucketName}/
                  --exclude "*.html" --recursive --metadata-directive REPLACE
                  --cache-control="max-age=31536000, public"
                # set cache-control headers for html files
                - >
                  aws s3 cp s3://${WebsiteBucketName}/ s3://${WebsiteBucketName}/
                  --exclude "*" --include "*.html" --recursive --metadata-directive REPLACE
                  --cache-control="max-age=0, no-cache, no-store, must-revalidate"
          cache:
            paths:
              - 'node_modules/**/*'
          artifacts:
            files:
              - '**/*'
            base-directory: dist
  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'codebuild.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                  - 's3:PutObject'
                Resource:
                  - !GetAtt CodePipelineBucket.Arn
                  - !Sub '${CodePipelineBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                  - 's3:ListBucket'
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                  - 's3:DeleteObject'
                  - 's3:DeleteObjectVersion'
                Resource:
                  - !Ref WebsiteBucketArn
                  - !Sub '${WebsiteBucketArn}/*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'cloudfront:CreateInvalidation'
                Resource:
                  - '*'
  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      ArtifactStore:
        Location: !Ref CodePipelineBucket
        Type: S3
      Name: !Ref PipelineName
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Branch: !Ref GithubBranch
                Owner: !Ref GithubOwnerAccount
                Repo: !Ref GithubRepo
                OAuthToken: !Ref GithubOAuthToken
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: AppSource
              Name: SourceAction
        - Name: Build
          Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuild
              InputArtifacts:
                - Name: AppSource
              OutputArtifacts:
                - Name: AppBuild
              Name: BuildAction
  CodePipelineBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !If [ HasPipelineBucket, !Ref PipelineBucket, !Ref 'AWS::NoValue' ]
  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                  - 's3:PutObject'
                Resource:
                  - !GetAtt CodePipelineBucket.Arn
                  - !Sub '${CodePipelineBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
  CodePipelineGithubWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      AuthenticationConfiguration:
        SecretToken: !Ref GithubOAuthToken
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref CodePipeline
      TargetAction: SourceAction
      Name: !Sub ${CodePipeline}-github-webhook
      TargetPipelineVersion: !GetAtt CodePipeline.Version
      RegisterWithThirdParty: true
  CodePipelineExternalWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: UNAUTHENTICATED
      AuthenticationConfiguration: {}
      Filters:
        - JsonPath: '$.branch'
          MatchEquals: '{Branch}'
      TargetPipeline: !Ref CodePipeline
      TargetAction: SourceAction
      Name: !Sub ${CodePipeline}-wp-webhook
      TargetPipelineVersion: !GetAtt CodePipeline.Version

Outputs:
  PipelineName:
    Description: The name of the codepipeline
    Value: !Ref CodePipeline
  PipelineBucket:
    Description: The bucket holding the code pipeline artifacts
    Value: !Ref CodePipelineBucket
  WordpressWebhookUrl:
    Description: Webhook URL for pushing change notifications from wordpress
    Value: !GetAtt CodePipelineExternalWebhook.Url
