---
AWSTemplateFormatVersion: "2010-09-09"

Description: Creates Lambda and Cloudwatch rule to send slack notification for code pipeline events

Metadata:
  Authors:
    Description: Mondo Robot

Parameters:
  CodePipelines:
    Description: Comma separated list of CodePipeline names to trigger notifications
    Type: CommaDelimitedList
  LogsRetentionInDays:
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Default: 1
    Description: 'Specifies the number of days you want to retain log events'
    Type: Number
  MemorySize:
    AllowedValues: [128, 256, 512, 1024]
    Default: 128
    Description: The memory size to use
    Type: Number
  Runtime:
    AllowedValues:
      - nodejs
      - nodejs4.3
      - nodejs6.10
      - nodejs8.10
    Default: nodejs8.10
    Description: The lambda runtime to use for execution
    Type: String
  SlackWebhook:
    Description: Webhook Url for slack
    Type: String
  Timeout:
    Default: 5
    Description: Lambda function execution time in seconds before terminating
    Type: Number

Resources:
  CloudWatchRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Run lambda on Code Pipeline change events
      EventPattern:
        detail-type:
          - CodePipeline Pipeline Execution State Change
        detail:
          pipeline: !Ref CodePipelines
        source:
          - aws.codepipeline
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: !Sub ${LambdaFunction}
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        # If you change the ZipFile, rename the logical id LambdaVersionV1 to trigger a new version creation!
        ZipFile: !Sub |
          'use strict';
          const https = require('https');
          const { URL } = require('url');

          exports.handler = (event, context, cb) => {
            const currentState = event.detail.state;

            let color = 'warning';
            let text = `*Build state - ${!currentState}*`;
            let icon = ':warning:';

            if (currentState == 'STARTED') {
              color = '#439FE0';
              icon = ':arrows_counterclockwise:';
              text = '*Build Started*';
            } else if (currentState == 'SUCCEEDED') {
              color = 'good';
              icon = ':100:';
              text = '*Build Succeeded*';
            } else if (currentState == 'FAILED') {
              color = 'danger';
              icon = ':fire:';
              text = '*Build Failed*';
            } else if (currentState == 'CANCELED') {
              color = 'danger';
              icon = ':x:';
              text = '*Build Canceled*';
            }

            const payload = {
              'icon_emoji': icon,
              'username': 'AWS BuildBot',
              'attachments': [
                {
                  'color': color,
                  'fallback': text,
                  'footer': event.detail['execution-id'],
                  'text': text,
                  'title': `Pipeline: ${!event.detail.pipeline}`,
                },
              ],
            };

            const url = new URL(process.env.SLACK_WEBHOOK_URL);
            const options = {
              headers: {
                  'Content-Type': 'application/json'
              },
              host: url.host,
              method: 'POST',
              path: url.pathname
            };

            const req = https.request(options, (res) => {
              res.on('data', () => cb(null, 'OK'));
            });

            req.on('error', (error) => cb(JSON.stringify(error)));
            req.write(JSON.stringify(payload));
            req.end();
          };
      Environment:
        Variables:
          SLACK_WEBHOOK_URL: !Ref SlackWebhook
      Description: Send build notifications to slack
      Handler: index.handler
      MemorySize: !Ref MemorySize
      Role: !GetAtt LambdaRole.Arn
      Runtime: !Ref Runtime
      Timeout: !Ref Timeout
  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunction}'
      RetentionInDays: !Ref LogsRetentionInDays
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CloudWatchRule.Arn
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  LambdaVersionV1:
    Type: 'AWS::Lambda::Version'
    Properties:
      FunctionName: !Ref LambdaFunction
