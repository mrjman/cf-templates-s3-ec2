AWSTemplateFormatVersion: 2010-09-09

Metadata:
  Author: Mondo Robot

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Lambda Parameters
        Parameters:
          - Username
          - Password
          - Runtime
          - Timeout
          - MemorySize
          - FunctionDescription
      - Label:
          default: Logging
        Parameters:
          - LogsRetentionInDays

Parameters:
  FunctionDescription:
    Default: Implements basic authentication
    Description: The description of the lambda function
    Type: String
  LogsRetentionInDays:
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Default: 14
    Description: 'Specifies the number of days you want to retain log events'
    Type: Number
  MemorySize:
    AllowedValues: [128, 256, 512, 1024]
    Default: 128
    Description: The memory size to use
    Type: Number
  Password:
    Description: The basic auth password
    NoEcho: true
    Type: String
  Runtime:
    AllowedValues:
      - nodejs
      - nodejs4.3
      - nodejs6.10
      - nodejs8.10
    Default: nodejs8.10
    Description: The lambda runtime to use for execution
    Type: String
  Timeout:
    Default: 5
    Description: Lambda function execution time in seconds before terminating
    Type: Number
  Username:
    Default: admin
    Description: The basic auth username
    Type: String

Conditions:
  HasFunctionDescription: !Not [ !Equals [ '', !Ref FunctionDescription ] ]

Resources:
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        # If you change the ZipFile, rename the logical id LambdaVersionV1 to trigger a new version creation!
        ZipFile:  !Sub |
          'use strict';

          const authString = 'Basic ' + new Buffer('${Username}' + ':' + '${Password}').toString('base64');

          exports.handler = (event, context, callback) => {
            const request = event.Records[0].cf.request;
            const headers = request.headers;

            // If basic auth header does not match, send WWW-Authenticate response
            if (typeof headers.authorization == 'undefined' || headers.authorization[0].value != authString) {
              const body = 'Unauthorized';
              const response = {
                status: '401',
                statusDescription: 'Unauthorized',
                body: body,
                headers: {
                  'www-authenticate': [{key: 'WWW-Authenticate', value:'Basic realm="Site access"'}]
                },
              };
              callback(null, response);
            }

            // Continue request processing if authentication passed
            callback(null, request);
          };
      Description: !If [ HasFunctionDescription, !Ref FunctionDescription, !Ref 'AWS::NoValue' ]
      Handler: 'index.handler'
      MemorySize: !Ref MemorySize
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: !Ref Runtime
      Timeout: !Ref Timeout
  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunction}'
      RetentionInDays: !Ref LogsRetentionInDays
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'edgelambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  LambdaVersionV1:
    Type: 'AWS::Lambda::Version'
    Properties:
      FunctionName: !Ref LambdaFunction

Outputs:
  StackName:
    Value: !Ref 'AWS::StackName'
  FunctionArn:
    Export:
      Name: !Sub ${AWS::StackName}-FunctionArn
    Value: !GetAtt LambdaFunction.Arn
  RoleArn:
    Export:
      Name: !Sub ${AWS::StackName}-RoleArn
    Value: !GetAtt LambdaRole.Arn
  Version:
    Export:
      Name: !Sub ${AWS::StackName}-Version
    Value: !GetAtt LambdaVersionV1.Version
  VersionArn:
    Export:
      Name: !Sub ${AWS::StackName}-VersionArn
    Value: !Ref LambdaVersionV1
