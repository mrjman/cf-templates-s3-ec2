---
AWSTemplateFormatVersion: 2010-09-09

Description: Reference Architecture to host WordPress on AWS - Creates WordPress web Auto Scaling group

Metadata:

  Authors:
    Description: Darryl Osborne (darrylo@amazon.com)
  License:
    Description: 'Copyright 2018 Amazon.com, Inc. and its affiliates. All Rights Reserved.
      Licensed under the Amazon Software License (the "License"). You may not use this file
      except in compliance with the License. A copy of the License is located at
      http://aws.amazon.com/asl/
      or in the "license" file accompanying this file. This file is distributed on an "AS IS"
      BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
      License for the specific language governing permissions and limitations under the License.'

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Web Parameters
        Parameters:
          - PHPVersion
          - PHPIniOverride
          - EC2KeyName
          - LatestAmiId
          - WebInstanceType
          - WebAsgMax
          - WebAsgMin
          - WebSecurityGroup
          - NumberOfSubnets
          - Subnet
          - PublicAlbTargetGroupArn
          - PublicAlbHostname
          - SslCertificate
      - Label:
          default: WordPress Parameters
        Parameters:
          - WPVersion
          - WPTitle
          - WPDomainName
          - WPDirectory
          - WPAdminUsername
          - WPAdminPassword
          - WPAdminEmail
          - WPLocale
          - WPACFProKey
      - Label:
          default: Database Parameters
        Parameters:
          - DatabaseClusterEndpointAddress
          - DatabaseName
          - DatabaseMasterUsername
          - DatabaseMasterPassword
      - Label:
          default: Media Parameters
        Parameters:
          - MediaUploadBucket
          - MediaUploadAccessKeyId
          - MediaUploadAccessKeySecret
          - CdnUrl
      - Label:
          default: File System Parameters
        Parameters:
          - ElasticFileSystem
    ParameterLabels:
      CdnUrl:
        default: CDN URL
      DatabaseClusterEndpointAddress:
        default: DB Cluster Endpoint Address
      DatabaseMasterUsername:
        default: DB Master Username
      DatabaseMasterPassword:
        default: DB Master Password
      DatabaseName:
        default: DB Name
      ElasticFileSystem:
        default: EFS File System
      EC2KeyName:
        default: Existing Key Pair
      LatestAmiId:
        default: Latest AMI Id
      MediaUploadAccessKeyId:
        default: Media Upload Access Key Id
      MediaUploadAccessKeySecret:
        default: Media Upload Access Key Secret
      MediaUploadBucket:
        default: Media Upload S3 Bucket
      NumberOfSubnets:
        default: Number of subnets
      PHPIniOverride:
        default: AWS php.ini Overrides
      PHPVersion:
        default: PHP Version
      PublicAlbTargetGroupArn:
        default: Public Alb Target Group Arn
      PublicAlbHostname:
        default: Public Alb Hostname
      SslCertificate:
        default: ACM Cert attached to Public Alb
      Subnet:
        default: Subnets
      WebAsgMax:
        default: Web ASG Max
      WebAsgMin:
        default: Web ASG Min
      WebInstanceType:
        default: Web Instance Type
      WebSecurityGroup:
        default: Web Security Group
      WPACFProKey:
        default: '[Optional] ACF Pro key'
      WPAdminEmail:
        default: Admin Email
      WPAdminPassword:
        default: Admin Password
      WPAdminUsername:
        default: Admin Username
      WPDirectory:
        default: Site Directory
      WPDomainName:
        default: Site Domain
      WPLocale:
        default: Language Code
      WPTitle:
        default: Site Title
      WPVersion:
        default: WordPress Version

Parameters:
  CdnUrl:
    Default: ''
    Description: '[Optional] Url for CDN assets hosting'
    Type: String
  DatabaseClusterEndpointAddress:
    Description: The RDS cluster endpoint address.
    Type: String
  DatabaseMasterUsername:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS master username.
    ConstraintDescription: Must contain only alphanumeric characters and be at least 8 characters.
    MaxLength: 16
    MinLength: 1
    Type: String
  DatabaseMasterPassword:
    AllowedPattern: ^([a-z0-9A-Z`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,-
    Description: The Amazon RDS master password.
    MaxLength: 41
    MinLength: 8
    NoEcho: true
    Type: String
  DatabaseName:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS master database name.
    Type: String
  ElasticFileSystem:
    Default: ''
    Description: The Amazon EFS file system id.
    Type: String
  EC2KeyName:
    AllowedPattern: ^([a-zA-Z0-9 @.`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and special characters.
    Description: Name of an EC2 KeyPair. Your bastion & Web instances will launch with this KeyPair.
    Type: AWS::EC2::KeyPair::KeyName
  LatestAmiId:
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
    Description: Specifies the AMI to use. Defaults to 64-bit Amazon Linux 1 (don't use 2)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
  MediaUploadAccessKeyId:
    Description: Access Key Id of the user account that allows media uploads from wordpress
    Type: String
  MediaUploadAccessKeySecret:
    Description: Access Key Secret of the user account that allows media uploads from wordpress
    NoEcho: true
    Type: String
  MediaUploadBucket:
    Description: The s3 bucket where media assets are uploaded
    Type: String
  NumberOfSubnets:
    AllowedValues: [2, 3, 4, 5, 6]
    Default: 2
    Description: Number of subnets. This must match your selections in the list of subnets below.
    Type: String
  PHPIniOverride:
    Description: Full Amazon S3 https path to a php.ini override file (e.g. https://s3.amazonaws.com/cf-coachella/wordpress/config-files/20-aws.ini)
    Type: String
  PHPVersion:
    AllowedValues: [5.5, 5.6, 7.0]
    Default: 7.0
    Description: The version of PHP to install.
    Type: String
  PublicAlbTargetGroupArn:
    Description: The public application load balancer target group arn.
    Type: String
  PublicAlbHostname:
    Description: The hostname of the public ALB http form (e.g. http://abdc-12345-xyz.<region>.elb.amazonaws.com)
    Type: String
  SslCertificate:
    AllowedValues: [true, false]
    Default: False
    Description: Is there an ACM SSL Certificate attached to the Public Alb?
    Type:
      String
  Subnet:
    Description: Select existing subnets. The number selected must match the number of subnets above. Subnets selected must be in separate AZs.
    Type: List<AWS::EC2::Subnet::Id>
  WebAsgMax:
    AllowedPattern: ^((?!0$)[1-2]?[0-9]|30)$
    ConstraintDescription: Must be a number between 1 and 30.
    Default: 2
    Description: Specifies the maximum number of EC2 instances in the Web Autoscaling Group.
    Type: String
  WebAsgMin:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    ConstraintDescription: Must be a number between 0 and 10.
    Default: 1
    Description: Specifies the minimum number of EC2 instances in the Web Autoscaling Group.
    Type: String
  WebInstanceType:
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - x1e.xlarge
      - x1e.2xlarge
      - x1e.4xlarge
      - x1e.8xlarge
      - x1e.16xlarge
      - x1e.32xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - h1.2xlarge
      - h1.4xlarge
      - h1.8xlarge
      - h1.16xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - f1.2xlarge
      - f1.16xlarge
      - g2.2xlarge
      - g2.8xlarge
      - g3.4xlarge
      - g3.8xlarge
      - g3.16xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
    Default: t2.micro
    Description: The Amazon EC2 instance type for your web instances.
    Type: String
  WebSecurityGroup:
    Description: Select the web security group.
    Type: AWS::EC2::SecurityGroup::Id
  WPACFProKey:
    Default: ''
    Description: Advanced Custom Fields Pro key
    NoEcho: true
    Type: String
  WPAdminEmail:
    AllowedPattern: ^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$
    Description: The WordPress admin email address.
    Type: String
  WPAdminPassword:
    AllowedPattern: ^([a-zA-Z0-9`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,-
    Description: The WordPress admin password.
    Type: String
    NoEcho: true
  WPAdminUsername:
    AllowedPattern: ^([a-zA-Z0-9])([a-zA-Z0-9_-])*([a-zA-Z0-9])$
    Description: The WordPress admin username.
    Type: String
  WPDirectory:
    AllowedPattern: ^([a-zA-Z0-9])([a-zA-Z0-9_-])*([a-zA-Z0-9])$
    Description: The WordPress site directory.
    Type: String
  WPDomainName:
    AllowedPattern: ^$|(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$
    Description: '[ Optional ] The main domain name of the WordPress site (e.g. example.com). Leave empty to use the ALB DNS name for the WordPress site.'
    Type: String
  WPLocale:
    Description: The main language of the WordPress site, as per https://codex.WordPress.org/Installing_WordPress_in_Your_Language. The default is 'en_US'.
    Type: String
    Default: en_US
  WPTitle:
    AllowedPattern: ^([a-zA-Z0-9])([a-zA-Z0-9 _-]*)([a-zA-Z0-9])$
    Description: The WordPress website title.
    Type: String
  WPVersion:
    AllowedValues:
      - latest
      - nightly
      - 4.5.3
      - 4.6.1
      - 4.7.4
      - 4.8.2
      - 4.9.8
      - 4.9.9
      - 5.0
    Default: 4.9.9
    Description: The WordPress version (make sure this version is compatible with the PHP version selected above).
    Type: String

Conditions:

  NoSslCertificate:
    !Equals [ False, !Ref SslCertificate ]
  NumberOfSubnets1:
    !Equals [ 1, !Ref NumberOfSubnets ]
  NumberOfSubnets2:
    !Equals [ 2, !Ref NumberOfSubnets ]
  NumberOfSubnets3:
    !Equals [ 3, !Ref NumberOfSubnets ]
  NumberOfSubnets4:
    !Equals [ 4, !Ref NumberOfSubnets ]
  NumberOfSubnets5:
    !Equals [ 5, !Ref NumberOfSubnets ]
  NumberOfSubnets6:
    !Equals [ 6, !Ref NumberOfSubnets ]
  PHP55:
    !Equals [ 5.5, !Ref PHPVersion ]
  PHP56:
    !Equals [ 5.6, !Ref PHPVersion ]
  PHP70:
    !Equals [ 7.0, !Ref PHPVersion ]
  NoWPDomainName:
    !Equals [ '', !Ref WPDomainName ]

Resources:
  WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref WebInstanceRole
  WebInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource:
                  - arn:aws:logs:*:*:*
        - PolicyName: cf-s3-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - 'arn:aws:s3:::cf-coachella/*'
  WebAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: '60'
      HealthCheckGracePeriod: 120
      HealthCheckType: ELB
      LaunchConfigurationName:
        !If
          [ PHP55,
          !Ref WebLaunchConfiguration55,
          !If
            [ PHP56,
            !Ref WebLaunchConfiguration56,
            !Ref WebLaunchConfiguration70
            ]
          ]
      MaxSize: !Ref WebAsgMax
      MinSize: !Ref WebAsgMin
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'Web ASG / ', !Ref 'AWS::StackName' ] ]
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref PublicAlbTargetGroupArn
      VPCZoneIdentifier:
        !If
          [ NumberOfSubnets1,
          [ !Select [ 0, !Ref Subnet ] ],
          !If
            [ NumberOfSubnets2,
            [ !Select [ 0, !Ref Subnet ], !Select [ 1, !Ref Subnet ] ],
            !If
              [ NumberOfSubnets3,
              [ !Select [ 0, !Ref Subnet ], !Select [ 1, !Ref Subnet ], !Select [ 2, !Ref Subnet ] ],
              !If
                [ NumberOfSubnets4,
                [ !Select [ 0, !Ref Subnet ], !Select [ 1, !Ref Subnet ], !Select [ 2, !Ref Subnet ], !Select [ 3, !Ref Subnet ] ],
                !If
                  [ NumberOfSubnets5,
                  [ !Select [ 0, !Ref Subnet ], !Select [ 1, !Ref Subnet ], !Select [ 2, !Ref Subnet ], !Select [ 3, !Ref Subnet ], !Select [ 4, !Ref Subnet ] ],
                  [ !Select [ 0, !Ref Subnet ], !Select [ 1, !Ref Subnet ], !Select [ 2, !Ref Subnet ], !Select [ 3, !Ref Subnet ], !Select [ 4, !Ref Subnet ], !Select [ 5, !Ref Subnet ] ]
                  ]
                ]
              ]
            ]
          ]
    CreationPolicy:
      ResourceSignal:
        Count: !Ref WebAsgMin
        Timeout: PT10M
  WebLaunchConfiguration55:
    Condition: PHP55
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          deploy_webserver:
            - install_webserver
            - build_cacheclient
            - build_wordpress
            - build_wordpress_plugins
            - build_wordpress_initialization
            - build_opcache
            - download_aws_ini
            - install_aws_ini
            - install_cacheclient
            - install_wordpress
            - install_wordpress_plugins
            - install_wordpress_initialization
            - install_opcache
            - start_webserver
        install_webserver:
          packages:
            yum:
              awslogs: []
              httpd24: []
              mysql56: []
              php55: []
              php55-mysqlnd: []
              php55-pecl-imagick: []
              php55-pecl-memcache: []
          files:
            /tmp/create_site_conf.sh:
              content:
                !Join [
                  "",[
                    "#!/bin/bash -xe\n",
                    "if [ ! -f /etc/httpd/conf.d/", !Ref WPDirectory, ".conf ]; then\n",
                    "   touch /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo 'ServerName 127.0.0.1:80' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo 'DocumentRoot /var/www/wordpress/", !Ref WPDirectory, "' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo '<Directory /var/www/wordpress/", !Ref WPDirectory, ">' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo '  Options Indexes FollowSymLinks' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo '  AllowOverride All' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo '  Require all granted' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo '</Directory>' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "fi\n"
                  ]
                ]
              mode: 000500
              owner: root
              group: root
          commands:
            create_site_conf:
              command: ./create_site_conf.sh
              cwd: /tmp
              ignoreErrors: false
        build_cacheclient:
          packages:
            yum:
              gcc-c++: []
          files:
            /tmp/install_cacheclient.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  wget -P /tmp/ https://s3.amazonaws.com/cf-coachella/wordpress/config-files/AmazonElastiCacheClusterClient-2.0.1-PHP70-64bit.tar.gz
                  tar -xf '/tmp/AmazonElastiCacheClusterClient-1.0.1-PHP55-64bit.tgz'
                  cp '/tmp/AmazonElastiCacheClusterClient-1.0.0/amazon-elasticache-cluster-client.so' /usr/lib64/php/5.5/modules/
                  if [ ! -f /etc/php-5.5.d/50-memcached.ini ]; then
                      touch /etc/php-5.5.d/50-memcached.ini
                  fi
                  sed -i '3i extension=/usr/lib64/php/5.5/modules/amazon-elasticache-cluster-client.so;' /etc/php-5.5.d/50-memcached.ini
                  sed -i '3i extension=igbinary.so;' /etc/php-5.5.d/50-memcached.ini
              mode: 000500
              owner: root
              group: root
        build_opcache:
          packages:
            yum:
              php55-opcache: []
          files:
            /tmp/install_opcache.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  # create hidden opcache directory locally & change owner to apache
                  if [ ! -d /var/www/.opcache ]; then
                      mkdir -p /var/www/.opcache
                  fi
                  # enable opcache in /etc/php-5.5.d/opcache.ini
                  sed -i 's/;opcache.file_cache=.*/opcache.file_cache=\/var\/www\/.opcache/' /etc/php-5.5.d/opcache.ini
                  sed -i 's/opcache.memory_consumption=.*/opcache.memory_consumption=512/' /etc/php-5.5.d/opcache.ini
                  # download opcache-instance.php to verify opcache status
                  if [ ! -f /var/www/wordpress/${WPDirectory}/opcache-instanceid.php ]; then
                      wget -P /var/www/wordpress/${WPDirectory}/ https://s3.amazonaws.com/cf-coachella/wordpress/config-files/opcache-instanceid.php
                  fi
              mode: 000500
              owner: root
              group: root
        build_wordpress:
          files:
            /tmp/install_wordpress.sh:
              content:
                !Join [
                  "",[
                    "#!/bin/bash -xe\n",
                    "\n",
                    "# install wp-cli\n",
                    "if [ ! -f /bin/wp/wp-cli.phar ]; then\n",
                    "   curl -o /bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n",
                    "   chmod +x /bin/wp\n",
                    "fi\n",
                    "\n",
                    "# make site directory\n",
                    "if [ ! -d /var/www/wordpress/", !Ref WPDirectory, " ]; then\n",
                    "   mkdir -p /var/www/wordpress/", !Ref WPDirectory, "\n",
                    "\n",
                    "   cd /var/www/wordpress/", !Ref WPDirectory, "\n",
                    "   # install wordpress if not installed\n",
                    "   # use public alb host name if wp domain name was empty\n",
                    "   if ! $(wp core is-installed --allow-root); then\n",
                    "       wp core download --version='", !Ref WPVersion, "' --locale='", !Ref WPLocale, "' --allow-root\n",
                    "       wp core config --dbname='", !Ref DatabaseName, "' --dbuser='", !Ref DatabaseMasterUsername, "' --dbpass='", !Ref DatabaseMasterPassword, "' --dbhost='", !Ref DatabaseClusterEndpointAddress, "' --dbprefix=wp_ --allow-root\n",
                    "       wp core install --url=", !If [ NoWPDomainName, !Ref PublicAlbHostname, !Join [ "", [ "'http://www.", !Ref WPDomainName, "'" ] ] ], " --title='", !Ref WPTitle, "' --admin_user='", !Ref WPAdminUsername, "' --admin_password='", !Ref WPAdminPassword, "' --admin_email='", !Ref WPAdminEmail, "' --skip-email --allow-root\n",
                    "       sed -i \"/$table_prefix = 'wp_';/ a \\define('WP_HOME', 'http://' . \\$_SERVER['HTTP_HOST']); \" /var/www/wordpress/", !Ref WPDirectory, "/wp-config.php\n",
                    "       sed -i \"/$table_prefix = 'wp_';/ a \\define('WP_SITEURL', 'http://' . \\$_SERVER['HTTP_HOST']); \" /var/www/wordpress/", !Ref WPDirectory, "/wp-config.php\n",
                    "       # enable HTTPS in wp-config.php if ACM Public SSL Certificate parameter was not empty\n",
                            !If [ NoSslCertificate, !Join [ '', [ "       sed -i \"/$table_prefix = 'wp_';/ a \\# No ACM Public SSL Certificate \" /var/www/wordpress/", !Ref WPDirectory, "/wp-config.php\n" ] ] , !Join [ '', [ "       sed -i \"/$table_prefix = 'wp_';/ a \\$_SERVER['HTTPS'] = 'on';\" /var/www/wordpress/", !Ref WPDirectory, "/wp-config.php\n" ] ] ],
                    "\n",
                    "       if [ ! -f /var/www/wordpress/", !Ref WPDirectory, "/opcache-instanceid.php ]; then\n",
                    "         wget -P /var/www/wordpress/", !Ref WPDirectory, "/ https://s3.amazonaws.com/cf-coachella/wordpress/config-files/opcache-instanceid.php\n",
                    "       fi\n",
                    "   fi\n",
                    "   RESULT=$?\n",
                    "   if [ $RESULT -eq 0 ]; then\n",
                    "       touch /var/www/wordpress/", !Ref WPDirectory, "/wordpress.initialized\n",
                    "         else\n",
                    "       touch /var/www/wordpress/", !Ref WPDirectory, "/wordpress.failed\n",
                    "   fi\n",
                    "fi\n"
                  ]
                ]
              mode: 000500
              owner: root
              group: root
        build_wordpress_plugins:
          files:
            /tmp/install_wordpress_plugins.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  cd /var/www/wordpress/${WPDirectory}

                  # install w3-total-cache plugin
                  if ! $(wp plugin is-installed w3-total-cache --allow-root); then
                      wp plugin install w3-total-cache --allow-root
                  fi

                  # install acf pro plugin if supplied
                  if [ -n "${WPACFProKey}" ]; then
                    if ! $(wp plugin is-installed advanced-custom-fields-pro --allow-root); then
                        # zip file location
                        acf_zip_file="$(wp plugin path --allow-root)/acf-pro.zip"

                        # get acf pro zip file
                        wget -O $acf_zip_file "http://connect.advancedcustomfields.com/index.php?p=pro&a=download&k=${WPACFProKey}"

                        # install & activate acf pro
                        wp plugin install $acf_zip_file --activate --allow-root

                        # remove zip file
                        rm $acf_zip_file
                    fi
                  elif ! $(wp plugin is-installed advanced-custom-fields --allow-root); then
                    wp plugin install advanced-custom-fields --activate --allow-root
                  fi

                  # install media cloud plugin
                  if ! $(wp plugin is-installed ilab-media-tools --allow-root); then
                      wp plugin install ilab-media-tools --activate --allow-root
                  fi

                  # install acf to rest api plugin
                  if ! $(wp plugin is-installed acf-to-rest-api --allow-root); then
                      wp plugin install acf-to-rest-api --activate --allow-root
                  fi

                  # install wp api menus plugin
                  if ! $(wp plugin is-installed wp-api-menus --allow-root); then
                      wp plugin install wp-api-menus --activate --allow-root
                  fi

                  # install notification plugin
                  if ! $(wp plugin is-installed notification --allow-root); then
                      wp plugin install notification --activate --allow-root
                  fi

                  # install duplicate post plugin
                  if ! $(wp plugin is-installed duplicate-post --allow-root); then
                      wp plugin install duplicate-post --activate --allow-root
                  fi

                  # install revisionize plugin
                  if ! $(wp plugin is-installed revisionize --allow-root); then
                      wp plugin install revisionize --activate --allow-root
                  fi

                  # install intentionally blank wordpress theme
                  if ! $(wp theme is-installed intentionally-blank --allow-root); then
                      wp theme install intentionally-blank --activate --allow-root
                  fi
              mode: 000500
              owner: root
              group: root
        build_wordpress_initialization:
          files:
            /tmp/install_wordpress_initialization.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  directory="/var/www/wordpress/${WPDirectory}"
                  cd "$directory"

                  # set wordpress config
                  wp config set DISALLOW_FILE_EDIT true --raw --type=constant --allow-root

                  # set wordpress permalink structure
                  wp rewrite structure "/%postname%/" --allow-root

                  # set wordpress options
                  wp option set blog_public "0" --allow-root
                  wp option update uploads_use_yearmonth_folders "0" --allow-root

                  # set Media Cloud plugin options
                  wp option update ilab-media-s3-access-key "${MediaUploadAccessKeyId}" --allow-root
                  wp option update ilab-media-s3-bucket "${MediaUploadBucket}" --allow-root
                  wp option update ilab-media-s3-cache-control "public,max-age=2592000" --allow-root
                  if [ -n "${CdnUrl}" ]; then
                    wp option update ilab-media-s3-cdn-base "${CdnUrl}" --allow-root
                  fi
                  wp option update ilab-media-s3-delete-uploads "on" --allow-root
                  wp option update ilab-media-s3-display-s3-badge "on" --allow-root
                  wp option update ilab-media-s3-prefix "uploads" --allow-root
                  wp option update ilab-media-s3-region "${AWS::Region}" --allow-root
                  wp option update ilab-media-s3-secret "${MediaUploadAccessKeySecret}" --allow-root
                  wp option update ilab-media-storage-provider "s3" --allow-root
                  wp option update ilab-media-tool-enabled-storage "1" --allow-root

                  # set permission of wordpress site directories
                  chown -R apache:apache "$directory"
                  find "$directory" -type d -exec chmod 750 {} \;
                  find "$directory" -type f -exec chmod 640 {} \;
              mode: 000500
              owner: root
              group: root
        download_aws_ini:
          files:
            /tmp/download_aws_ini.sh:
              content:
                !Join [
                  "",[
                    "#!/bin/bash -x\n",
                    "\n",
                    "wget -P /etc/php-5.5.d/ ", !Ref PHPIniOverride, "\n"
                  ]
                ]
              mode: 000500
              owner: root
              group: root
        install_aws_ini:
          commands:
            install_aws_ini:
              command: ./download_aws_ini.sh
              cwd: /tmp
              ignoreErrors: true
        install_wordpress:
          commands:
            install_wordpress:
              command: ./install_wordpress.sh
              cwd: /tmp
              ignoreErrors: false
        install_wordpress_plugins:
          commands:
            install_wordpress_plugins:
              command: ./install_wordpress_plugins.sh
              cwd: /tmp
              ignoreErrors: false
        install_wordpress_initialization:
          commands:
            install_wordpress_initialization:
              command: ./install_wordpress_initialization.sh
              cwd: /tmp
              ignoreErrors: false
        install_cacheclient:
          commands:
            install_cacheclient:
              command: ./install_cacheclient.sh
              cwd: /tmp
              ignoreErrors: false
        install_opcache:
          commands:
            install_opcache:
              command: ./install_opcache.sh
              cwd: /tmp
              ignoreErrors: false
        start_webserver:
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      IamInstanceProfile: !Ref WebInstanceProfile
      ImageId: !Ref LatestAmiId
      InstanceMonitoring: true
      InstanceType: !Ref WebInstanceType
      KeyName: !Ref EC2KeyName
      SecurityGroups:
      - !Ref WebSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            yum update -y
            mkdir -p /var/www/wordpress

            if [ -n "${ElasticFileSystem}" ]; then
              mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${ElasticFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /var/www/wordpress
            fi

            /opt/aws/bin/cfn-init --configsets deploy_webserver --verbose --stack ${AWS::StackName} --resource WebLaunchConfiguration55 --region ${AWS::Region}
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource WebAutoScalingGroup --region ${AWS::Region}
  WebLaunchConfiguration56:
    Condition: PHP56
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          deploy_webserver:
            - install_webserver
            - build_cacheclient
            - build_wordpress
            - build_wordpress_plugins
            - build_wordpress_initialization
            - build_opcache
            - download_aws_ini
            - install_aws_ini
            - install_cacheclient
            - install_wordpress
            - install_wordpress_plugins
            - install_wordpress_initialization
            - install_opcache
            - start_webserver
        install_webserver:
          packages:
            yum:
              awslogs: []
              httpd24: []
              mysql56: []
              php56: []
              php56-mysqlnd: []
              php56-pecl-imagick: []
              php56-pecl-memcache: []
          files:
            /tmp/create_site_conf.sh:
              content:
                !Join [
                  "",[
                    "#!/bin/bash -xe\n",
                    "if [ ! -f /etc/httpd/conf.d/", !Ref WPDirectory, ".conf ]; then\n",
                    "   touch /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo 'ServerName 127.0.0.1:80' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo 'DocumentRoot /var/www/wordpress/", !Ref WPDirectory, "' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo '<Directory /var/www/wordpress/", !Ref WPDirectory, ">' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo '  Options Indexes FollowSymLinks' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo '  AllowOverride All' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo '  Require all granted' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo '</Directory>' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "fi\n"
                  ]
                ]
              mode: 000500
              owner: root
              group: root
          commands:
            create_site_conf:
              command: ./create_site_conf.sh
              cwd: /tmp
              ignoreErrors: false
        build_cacheclient:
          packages:
            yum:
              gcc-c++: []
          files:
            /tmp/install_cacheclient.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  wget -P /tmp/ https://s3.amazonaws.com/cf-coachella/wordpress/config-files/AmazonElastiCacheClusterClient-2.0.1-PHP70-64bit.tar.gz
                  tar -xf '/tmp/AmazonElastiCacheClusterClient-1.0.0-PHP56-64bit.tgz'
                  cp '/tmp/AmazonElastiCacheClusterClient-1.0.0/amazon-elasticache-cluster-client.so' /usr/lib64/php/5.6/modules/
                  if [ ! -f /etc/php-5.6.d/50-memcached.ini ]; then
                      touch /etc/php-5.6.d/50-memcached.ini
                  fi
                  sed -i '3i extension=/usr/lib64/php/5.6/modules/amazon-elasticache-cluster-client.so;' /etc/php-5.6.d/50-memcached.ini
                  sed -i '3i extension=igbinary.so;' /etc/php-5.6.d/50-memcached.ini
              mode: 000500
              owner: root
              group: root
        build_opcache:
          packages:
            yum:
              php56-opcache: []
          files:
            /tmp/install_opcache.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  # create hidden opcache directory locally & change owner to apache
                  if [ ! -d /var/www/.opcache ]; then
                      mkdir -p /var/www/.opcache
                  fi
                  # enable opcache in /etc/php-5.6.d/opcache.ini
                  sed -i 's/;opcache.file_cache=.*/opcache.file_cache=\/var\/www\/.opcache/' /etc/php-5.6.d/10-opcache.ini
                  sed -i 's/opcache.memory_consumption=.*/opcache.memory_consumption=512/' /etc/php-5.6.d/10-opcache.ini
                  # download opcache-instance.php to verify opcache status
                  if [ ! -f /var/www/wordpress/${WPDirectory}/opcache-instanceid.php ]; then
                      wget -P /var/www/wordpress/${WPDirectory}/ https://s3.amazonaws.com/cf-coachella/wordpress/config-files/opcache-instanceid.php
                  fi
              mode: 000500
              owner: root
              group: root
        build_wordpress:
          files:
            /tmp/install_wordpress.sh:
              content:
                !Join [
                  "",[
                    "#!/bin/bash -xe\n",
                    "\n",
                    "# install wp-cli\n",
                    "if [ ! -f /bin/wp/wp-cli.phar ]; then\n",
                    "   curl -o /bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n",
                    "   chmod +x /bin/wp\n",
                    "fi\n",
                    "\n",
                    "# make site directory\n",
                    "if [ ! -d /var/www/wordpress/", !Ref WPDirectory, " ]; then\n",
                    "   mkdir -p /var/www/wordpress/", !Ref WPDirectory, "\n",
                    "\n",
                    "   cd /var/www/wordpress/", !Ref WPDirectory, "\n",
                    "   # install wordpress if not installed\n",
                    "   # use public alb host name if wp domain name was empty\n",
                    "   if ! $(wp core is-installed --allow-root); then\n",
                    "       wp core download --version='", !Ref WPVersion, "' --locale='", !Ref WPLocale, "' --allow-root\n",
                    "       wp core config --dbname='", !Ref DatabaseName, "' --dbuser='", !Ref DatabaseMasterUsername, "' --dbpass='", !Ref DatabaseMasterPassword, "' --dbhost='", !Ref DatabaseClusterEndpointAddress, "' --dbprefix=wp_ --allow-root\n",
                    "       wp core install --url=", !If [ NoWPDomainName, !Ref PublicAlbHostname, !Join [ "", [ "'http://www.", !Ref WPDomainName, "'" ] ] ], " --title='", !Ref WPTitle, "' --admin_user='", !Ref WPAdminUsername, "' --admin_password='", !Ref WPAdminPassword, "' --admin_email='", !Ref WPAdminEmail, "' --skip-email --allow-root\n",
                    "       sed -i \"/$table_prefix = 'wp_';/ a \\define('WP_HOME', 'http://' . \\$_SERVER['HTTP_HOST']); \" /var/www/wordpress/", !Ref WPDirectory, "/wp-config.php\n",
                    "       sed -i \"/$table_prefix = 'wp_';/ a \\define('WP_SITEURL', 'http://' . \\$_SERVER['HTTP_HOST']); \" /var/www/wordpress/", !Ref WPDirectory, "/wp-config.php\n",
                    "       # enable HTTPS in wp-config.php if ACM Public SSL Certificate parameter was not empty\n",
                            !If [ NoSslCertificate, !Join [ '', [ "       sed -i \"/$table_prefix = 'wp_';/ a \\# No ACM Public SSL Certificate \" /var/www/wordpress/", !Ref WPDirectory, "/wp-config.php\n" ] ] , !Join [ '', [ "       sed -i \"/$table_prefix = 'wp_';/ a \\$_SERVER['HTTPS'] = 'on';\" /var/www/wordpress/", !Ref WPDirectory, "/wp-config.php\n" ] ] ],
                    "\n",
                    "       if [ ! -f /var/www/wordpress/", !Ref WPDirectory, "/opcache-instanceid.php ]; then\n",
                    "         wget -P /var/www/wordpress/", !Ref WPDirectory, "/ https://s3.amazonaws.com/cf-coachella/wordpress/config-files/opcache-instanceid.php\n",
                    "       fi\n",
                    "   fi\n",
                    "   RESULT=$?\n",
                    "   if [ $RESULT -eq 0 ]; then\n",
                    "       touch /var/www/wordpress/", !Ref WPDirectory, "/wordpress.initialized\n",
                    "         else\n",
                    "       touch /var/www/wordpress/", !Ref WPDirectory, "/wordpress.failed\n",
                    "   fi\n",
                    "fi\n"
                  ]
                ]
              mode: 000500
              owner: root
              group: root
        build_wordpress_plugins:
          files:
            /tmp/install_wordpress_plugins.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  cd /var/www/wordpress/${WPDirectory}

                  # install w3-total-cache plugin
                  if ! $(wp plugin is-installed w3-total-cache --allow-root); then
                      wp plugin install w3-total-cache --allow-root
                  fi

                  # install acf pro plugin if supplied
                  if [ -n "${WPACFProKey}" ]; then
                    if ! $(wp plugin is-installed advanced-custom-fields-pro --allow-root); then
                        # zip file location
                        acf_zip_file="$(wp plugin path --allow-root)/acf-pro.zip"

                        # get acf pro zip file
                        wget -O $acf_zip_file "http://connect.advancedcustomfields.com/index.php?p=pro&a=download&k=${WPACFProKey}"

                        # install & activate acf pro
                        wp plugin install $acf_zip_file --activate --allow-root

                        # remove zip file
                        rm $acf_zip_file
                    fi
                  elif ! $(wp plugin is-installed advanced-custom-fields --allow-root); then
                    wp plugin install advanced-custom-fields --activate --allow-root
                  fi

                  # install media cloud plugin
                  if ! $(wp plugin is-installed ilab-media-tools --allow-root); then
                      wp plugin install ilab-media-tools --activate --allow-root
                  fi

                  # install acf to rest api plugin
                  if ! $(wp plugin is-installed acf-to-rest-api --allow-root); then
                      wp plugin install acf-to-rest-api --activate --allow-root
                  fi

                  # install wp api menus plugin
                  if ! $(wp plugin is-installed wp-api-menus --allow-root); then
                      wp plugin install wp-api-menus --activate --allow-root
                  fi

                  # install notification plugin
                  if ! $(wp plugin is-installed notification --allow-root); then
                      wp plugin install notification --activate --allow-root
                  fi

                  # install duplicate post plugin
                  if ! $(wp plugin is-installed duplicate-post --allow-root); then
                      wp plugin install duplicate-post --activate --allow-root
                  fi

                  # install revisionize plugin
                  if ! $(wp plugin is-installed revisionize --allow-root); then
                      wp plugin install revisionize --activate --allow-root
                  fi

                  # install intentionally blank wordpress theme
                  if ! $(wp theme is-installed intentionally-blank --allow-root); then
                      wp theme install intentionally-blank --activate --allow-root
                  fi
              mode: 000500
              owner: root
              group: root
        build_wordpress_initialization:
          files:
            /tmp/install_wordpress_initialization.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  directory="/var/www/wordpress/${WPDirectory}"
                  cd "$directory"

                  # set wordpress config
                  wp config set DISALLOW_FILE_EDIT true --raw --type=constant --allow-root

                  # set wordpress permalink structure
                  wp rewrite structure "/%postname%/" --allow-root

                  # set wordpress options
                  wp option set blog_public "0" --allow-root
                  wp option update uploads_use_yearmonth_folders "0" --allow-root

                  # set Media Cloud plugin options
                  wp option update ilab-media-s3-access-key "${MediaUploadAccessKeyId}" --allow-root
                  wp option update ilab-media-s3-bucket "${MediaUploadBucket}" --allow-root
                  wp option update ilab-media-s3-cache-control "public,max-age=2592000" --allow-root
                  if [ -n "${CdnUrl}" ]; then
                    wp option update ilab-media-s3-cdn-base "${CdnUrl}" --allow-root
                  fi
                  wp option update ilab-media-s3-delete-uploads "on" --allow-root
                  wp option update ilab-media-s3-display-s3-badge "on" --allow-root
                  wp option update ilab-media-s3-prefix "uploads" --allow-root
                  wp option update ilab-media-s3-region "${AWS::Region}" --allow-root
                  wp option update ilab-media-s3-secret "${MediaUploadAccessKeySecret}" --allow-root
                  wp option update ilab-media-storage-provider "s3" --allow-root
                  wp option update ilab-media-tool-enabled-storage "1" --allow-root

                  # set permission of wordpress site directories
                  chown -R apache:apache "$directory"
                  find "$directory" -type d -exec chmod 750 {} \;
                  find "$directory" -type f -exec chmod 640 {} \;
              mode: 000500
              owner: root
              group: root
        download_aws_ini:
          files:
            /tmp/download_aws_ini.sh:
              content:
                !Join [
                  "",[
                    "#!/bin/bash -x\n",
                    "\n",
                    "wget -P /etc/php-5.6.d/ ", !Ref PHPIniOverride, "\n"
                  ]
                ]
              mode: 000500
              owner: root
              group: root
        install_aws_ini:
          commands:
            install_aws_ini:
              command: ./download_aws_ini.sh
              cwd: /tmp
              ignoreErrors: true
        install_wordpress:
          commands:
            install_wordpress:
              command: ./install_wordpress.sh
              cwd: /tmp
              ignoreErrors: false
        install_wordpress_plugins:
          commands:
            install_wordpress_plugins:
              command: ./install_wordpress_plugins.sh
              cwd: /tmp
              ignoreErrors: false
        install_wordpress_initialization:
          commands:
            install_wordpress_initialization:
              command: ./install_wordpress_initialization.sh
              cwd: /tmp
              ignoreErrors: false
        install_cacheclient:
          commands:
            install_cacheclient:
              command: ./install_cacheclient.sh
              cwd: /tmp
              ignoreErrors: false
        install_opcache:
          commands:
            install_opcache:
              command: ./install_opcache.sh
              cwd: /tmp
              ignoreErrors: false
        start_webserver:
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      IamInstanceProfile: !Ref WebInstanceProfile
      ImageId: !Ref LatestAmiId
      InstanceMonitoring: true
      InstanceType: !Ref WebInstanceType
      KeyName: !Ref EC2KeyName
      SecurityGroups:
      - !Ref WebSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            yum update -y
            mkdir -p /var/www/wordpress

            if [ -n "${ElasticFileSystem}" ]; then
              mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${ElasticFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /var/www/wordpress
            fi

            /opt/aws/bin/cfn-init --configsets deploy_webserver --verbose --stack ${AWS::StackName} --resource WebLaunchConfiguration56 --region ${AWS::Region}
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource WebAutoScalingGroup --region ${AWS::Region}
  WebLaunchConfiguration70:
    Condition: PHP70
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Access:
          type: S3
          roleName: !Ref WebInstanceRole
          buckets:
            - 'cf-coachella'
      AWS::CloudFormation::Init:
        configSets:
          deploy_webserver:
            - install_webserver
            - build_cacheclient
            - build_wordpress
            - build_wordpress_plugins
            - build_wordpress_initialization
            - build_opcache
            - install_aws_ini
            - install_cacheclient
            - install_wordpress
            - install_htaccess
            - install_wordpress_plugins
            - install_opcache
            - install_wordpress_initialization
            - start_webserver
        install_webserver:
          packages:
            yum:
              awslogs: []
              httpd24: []
              mysql56: []
              php70: []
              php70-mysqlnd: []
              php70-pecl-imagick: []
              php70-pecl-memcache: []
          files:
            /tmp/create_site_conf.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  conf_file="/etc/httpd/conf.d/${WPDirectory}.conf"
                  directory="/var/www/wordpress/${WPDirectory}"

                  if [ ! -f "$conf_file" ]; then
                     touch "$conf_file"
                     echo "ServerSignature Off" >> "$conf_file"
                     echo "ServerTokens Prod" >> "$conf_file"
                     echo "ServerName 127.0.0.1:80" >> "$conf_file"
                     echo "DocumentRoot $directory" >> "$conf_file"
                     echo "<Directory $directory>" >> "$conf_file"
                     echo "  Options Indexes FollowSymLinks" >> "$conf_file"
                     echo "  AllowOverride All" >> "$conf_file"
                     echo "  Require all granted" >> "$conf_file"
                     echo "</Directory>" >> "$conf_file"
                  fi
              mode: 000500
              owner: root
              group: root
          commands:
            create_site_conf:
              command: ./create_site_conf.sh
              cwd: /tmp
              ignoreErrors: false
        build_cacheclient:
          packages:
            yum:
              gcc-c++: []
          files:
            /tmp/install_cacheclient.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  cp '/tmp/artifact/amazon-elasticache-cluster-client.so' /usr/lib64/php/7.0/modules/
                  if [ ! -f /etc/php-7.0.d/50-memcached.ini ]; then
                      touch /etc/php-7.0.d/50-memcached.ini
                  fi
                  sed -i '3i extension=/usr/lib64/php/7.0/modules/amazon-elasticache-cluster-client.so;' /etc/php-7.0.d/50-memcached.ini
                  sed -i '3i extension=igbinary.so;' /etc/php-7.0.d/50-memcached.ini
              mode: 000500
              owner: root
              group: root
          sources:
            /tmp: https://s3.amazonaws.com/cf-coachella/wordpress/config-files/AmazonElastiCacheClusterClient-2.0.1-PHP70-64bit.tar.gz
        build_opcache:
          packages:
            yum:
              php70-opcache: []
          files:
            /tmp/install_opcache.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  # create hidden opcache directory locally & change owner to apache
                  if [ ! -d /var/www/.opcache ]; then
                    mkdir -p /var/www/.opcache
                  fi

                  # enable opcache in /etc/php-7.0.d/10-opcache.ini
                  sed -i 's/;opcache.file_cache=.*/opcache.file_cache=\/var\/www\/.opcache/' /etc/php-7.0.d/10-opcache.ini
                  sed -i 's/opcache.memory_consumption=.*/opcache.memory_consumption=512/' /etc/php-7.0.d/10-opcache.ini

                  # download opcache-instance.php to verify opcache status
                  if [ ! -f "/var/www/wordpress/${WPDirectory}/opcache-instanceid.php" ]; then
                    mv "/tmp/opcache-instanceid.php" "/var/www/wordpress/${WPDirectory}/"
                  fi
              mode: 000500
              owner: root
              group: root
            /tmp/opcache-instanceid.php:
              source: https://s3.amazonaws.com/cf-coachella/wordpress/config-files/opcache-instanceid.php
              mode: 000500
              owner: root
              group: root
        build_wordpress:
          files:
            /tmp/install_wordpress.sh:
              content:
                !Sub
                  - |
                    #!/bin/bash -xe

                    # install wp-cli
                    if [ ! -f "/bin/wp/wp-cli.phar" ]; then
                      curl -o "/bin/wp" "https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar"
                      chmod +x "/bin/wp"
                    fi

                    wp_cli_config="/var/www/wordpress/wp-cli.yml"
                    if [ ! -f "$wp_cli_config" ]; then
                      echo "apache_modules: [mod_rewrite]" >> "$wp_cli_config"
                    fi

                    directory="/var/www/wordpress/${WPDirectory}"

                    # make site directory
                    if [ ! -d "$directory" ]; then
                      mkdir -p "$directory" && cd "$directory"

                      # install wordpress if not installed
                      # use public alb host name if wp domain name was empty
                      if ! $(wp core is-installed --allow-root); then
                        wp core download --version="${WPVersion}" --locale="${WPLocale}" --allow-root
                        wp core config --dbname="${DatabaseName}" --dbuser="${DatabaseMasterUsername}" --dbpass="${DatabaseMasterPassword}" --dbhost="${DatabaseClusterEndpointAddress}" --dbprefix="wp_" --allow-root
                        wp core install --url="${DomainUrl}" --title="${WPTitle}" --admin_user="${WPAdminUsername}" --admin_password="${WPAdminPassword}" --admin_email="${WPAdminEmail}" --skip-email --allow-root

                        sed -i "/$table_prefix = 'wp_';/a define('WP_HOME', 'http://' . \$_SERVER['HTTP_HOST']);" "$directory/wp-config.php"
                        sed -i "/$table_prefix = 'wp_';/a define('WP_SITEURL', 'http://' . \$_SERVER['HTTP_HOST']);" "$directory/wp-config.php"

                        # set HTTPS based on HTTP_X_FORWARDED_PROTO header
                        sed -i "/$table_prefix = 'wp_';/a if (strpos(\$_SERVER['HTTP_X_FORWARDED_PROTO'], 'https') !== false) {\n  \$_SERVER['HTTPS']='on';\\n}" "$directory/wp-config.php"
                      fi

                      RESULT=$?

                      if [ $RESULT -eq 0 ]; then
                        touch "$directory/wordpress.initialized"
                      else
                        touch "$directory/wordpress.failed"
                      fi
                    fi
                  - { DomainUrl: !If [ NoWPDomainName, !Ref PublicAlbHostname, !Join [ "", [ "'http://www.", !Ref WPDomainName, "'" ] ] ] }
              mode: 000500
              owner: root
              group: root
        build_wordpress_plugins:
          files:
            /tmp/install_wordpress_plugins.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  cd /var/www/wordpress/${WPDirectory}

                  # install acf pro plugin if supplied
                  if [ -n "${WPACFProKey}" ]; then
                    if ! $(wp plugin is-installed advanced-custom-fields-pro --allow-root); then
                        # zip file location
                        acf_zip_file="$(wp plugin path --allow-root)/acf-pro.zip"

                        # get acf pro zip file
                        wget -O $acf_zip_file "http://connect.advancedcustomfields.com/index.php?p=pro&a=download&k=${WPACFProKey}"

                        # install & activate acf pro
                        wp plugin install $acf_zip_file --activate --allow-root

                        # remove zip file
                        rm $acf_zip_file
                    fi
                  elif ! $(wp plugin is-installed advanced-custom-fields --allow-root); then
                    wp plugin install advanced-custom-fields --activate --allow-root
                  fi

                  # install media cloud plugin
                  if ! $(wp plugin is-installed ilab-media-tools --allow-root); then
                      wp plugin install ilab-media-tools --activate --allow-root
                  fi

                  # install acf to rest api plugin
                  if ! $(wp plugin is-installed acf-to-rest-api --allow-root); then
                      wp plugin install acf-to-rest-api --activate --allow-root
                  fi

                  # install wp api menus plugin
                  if ! $(wp plugin is-installed wp-api-menus --allow-root); then
                      wp plugin install wp-api-menus --activate --allow-root
                  fi

                  # install notification plugin
                  if ! $(wp plugin is-installed notification --allow-root); then
                      wp plugin install notification --activate --allow-root
                  fi

                  # install duplicate post plugin
                  if ! $(wp plugin is-installed duplicate-post --allow-root); then
                      wp plugin install duplicate-post --activate --allow-root
                  fi

                  # install revisionize plugin
                  if ! $(wp plugin is-installed revisionize --allow-root); then
                      wp plugin install revisionize --activate --allow-root
                  fi

                  # install intentionally blank wordpress theme
                  if ! $(wp theme is-installed intentionally-blank --allow-root); then
                      wp theme install intentionally-blank --activate --allow-root
                  fi
              mode: 000500
              owner: root
              group: root
        build_wordpress_initialization:
          files:
            /tmp/install_wordpress_initialization.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  directory="/var/www/wordpress/${WPDirectory}"
                  cd "$directory"

                  # set wordpress config
                  wp config set DISALLOW_FILE_EDIT true --raw --type=constant --allow-root

                  # set wordpress permalink structure
                  wp rewrite structure "/%postname%/" --hard --allow-root

                  # set wordpress options
                  wp option update blog_public "0" --allow-root
                  wp option update uploads_use_yearmonth_folders "0" --allow-root
                  wp option update default_comment_status "closed" --allow-root
                  wp option update default_ping_status "closed" --allow-root
                  wp option update default_pingback_flag "0" --allow-root

                  # set Media Cloud plugin options
                  wp option update ilab-media-s3-access-key "${MediaUploadAccessKeyId}" --allow-root
                  wp option update ilab-media-s3-bucket "${MediaUploadBucket}" --allow-root
                  wp option update ilab-media-s3-cache-control "public,max-age=2592000" --allow-root
                  if [ -n "${CdnUrl}" ]; then
                    wp option update ilab-media-s3-cdn-base "${CdnUrl}" --allow-root
                  fi
                  wp option update ilab-media-s3-delete-uploads "on" --allow-root
                  wp option update ilab-media-s3-display-s3-badge "on" --allow-root
                  wp option update ilab-media-s3-prefix "uploads" --allow-root
                  wp option update ilab-media-s3-region "${AWS::Region}" --allow-root
                  wp option update ilab-media-s3-secret "${MediaUploadAccessKeySecret}" --allow-root
                  wp option update ilab-media-storage-provider "s3" --allow-root
                  wp option update ilab-media-tool-enabled-storage "1" --allow-root

                  # set permission of wordpress site directories
                  chown -R apache:apache "$directory"
                  find "$directory" -type d -exec chmod 750 {} \;
                  find "$directory" -type f -exec chmod 640 {} \;
              mode: 000500
              owner: root
              group: root
        install_cacheclient:
          commands:
            install_cacheclient:
              command: ./install_cacheclient.sh
              cwd: /tmp
              ignoreErrors: false
        install_aws_ini:
          files:
            /tmp/20-aws.ini:
              source: !Ref PHPIniOverride
              mode: 000500
              owner: root
              group: root
          commands:
            install_aws_ini:
              command: cp "20-aws.ini" "/etc/php-7.0.d/"
              cwd: /tmp
              ignoreErrors: true
        install_htaccess:
          files:
            /tmp/.htaccess:
              source: https://s3.amazonaws.com/cf-coachella/wordpress/config-files/.htaccess
              mode: 000500
              owner: root
              group: root
            /tmp/.htaccess-uploads:
              source: https://s3.amazonaws.com/cf-coachella/wordpress/config-files/.htaccess-uploads
              mode: 000500
              owner: root
              group: root
          commands:
            install_htaccess:
              command: !Sub cp .htaccess "/var/www/wordpress/${WPDirectory}/"
              cwd: /tmp
              ignoreErrors: false
            install_htaccess_uploads:
              command: !Sub mkdir -p "/var/www/wordpress/${WPDirectory}/wp-content/uploads" && cp .htaccess-uploads "/var/www/wordpress/${WPDirectory}/wp-content/uploads/.htaccess"
              cwd: /tmp
              ignoreErrors: false
        install_opcache:
          commands:
            install_opcache:
              command: ./install_opcache.sh
              cwd: /tmp
              ignoreErrors: false
        install_wordpress:
          commands:
            install_wordpress:
              command: ./install_wordpress.sh
              cwd: /tmp
              ignoreErrors: false
        install_wordpress_plugins:
          commands:
            install_wordpress_plugins:
              command: ./install_wordpress_plugins.sh
              cwd: /tmp
              ignoreErrors: false
        install_wordpress_initialization:
          commands:
            install_wordpress_initialization:
              command: ./install_wordpress_initialization.sh
              cwd: /tmp
              ignoreErrors: false
        start_webserver:
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      IamInstanceProfile: !Ref WebInstanceProfile
      ImageId: !Ref LatestAmiId
      InstanceMonitoring: true
      InstanceType: !Ref WebInstanceType
      KeyName: !Ref EC2KeyName
      SecurityGroups:
      - !Ref WebSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            yum update -y
            mkdir -p /var/www/wordpress

            if [ -n "${ElasticFileSystem}" ]; then
              mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${ElasticFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /var/www/wordpress
            fi

            /opt/aws/bin/cfn-init --configsets deploy_webserver --verbose --stack ${AWS::StackName} --resource WebLaunchConfiguration70 --region ${AWS::Region}
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource WebAutoScalingGroup --region ${AWS::Region}

Outputs:
  Opcachestatus:
    Value: !Join [ '', [ !Ref PublicAlbHostname, '/opcache-instanceid.php' ] ]
