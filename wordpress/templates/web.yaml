---
AWSTemplateFormatVersion: 2010-09-09

Description: >
  Creates an autoscaling group for web instances meant to run wordpress sitting
  behind a load balancer. Optionally allows an EFS file system to be attached
  for shared resources. Inspired from the wordpress reference architecture
  https://github.com/aws-samples/aws-refarch-wordpress.

Metadata:
  Author: Mondo Robot

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Web Parameters
        Parameters:
          - PHPVersion
          - EC2KeyName
          - LatestAmiId
          - WebInstanceType
          - WebAsgMax
          - WebAsgMin
          - WebSecurityGroup
          - NumberOfSubnets
          - Subnet
          - PublicAlbTargetGroupArn
          - PublicAlbHostname
      - Label:
          default: File System Parameters
        Parameters:
          - ElasticFileSystem
    ParameterLabels:
      ElasticFileSystem:
        default: EFS File System
      EC2KeyName:
        default: Existing Key Pair
      LatestAmiId:
        default: Latest AMI Id
      NumberOfSubnets:
        default: Number of subnets
      PHPVersion:
        default: PHP Version
      PublicAlbTargetGroupArn:
        default: Public Alb Target Group Arn
      PublicAlbHostname:
        default: Public Alb Hostname
      Subnet:
        default: Subnets
      WebAsgMax:
        default: Web ASG Max
      WebAsgMin:
        default: Web ASG Min
      WebInstanceType:
        default: Web Instance Type
      WebSecurityGroup:
        default: Web Security Group

Parameters:
  ElasticFileSystem:
    Default: ''
    Description: The Amazon EFS file system id.
    Type: String
  EC2KeyName:
    AllowedPattern: ^([a-zA-Z0-9 @.`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and special characters.
    Description: Name of an EC2 KeyPair. Your bastion & Web instances will launch with this KeyPair.
    Type: AWS::EC2::KeyPair::KeyName
  LatestAmiId:
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
    Description: Specifies the AMI to use. Defaults to 64-bit Amazon Linux 1 (don't use 2)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
  NumberOfSubnets:
    AllowedValues: [2, 3, 4, 5, 6]
    Default: 2
    Description: Number of subnets. This must match your selections in the list of subnets below.
    Type: String
  PHPVersion:
    AllowedValues: [7.0]
    Default: 7.0
    Description: The version of PHP to install.
    Type: String
  PublicAlbTargetGroupArn:
    Description: The public application load balancer target group arn.
    Type: String
  PublicAlbHostname:
    Description: The hostname of the public ALB http form (e.g. http://abdc-12345-xyz.<region>.elb.amazonaws.com)
    Type: String
  Subnet:
    Description: Select existing subnets. The number selected must match the number of subnets above. Subnets selected must be in separate AZs.
    Type: List<AWS::EC2::Subnet::Id>
  WebAsgMax:
    AllowedPattern: ^((?!0$)[1-2]?[0-9]|30)$
    ConstraintDescription: Must be a number between 1 and 30.
    Default: 2
    Description: Specifies the maximum number of EC2 instances in the Web Autoscaling Group.
    Type: String
  WebAsgMin:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    ConstraintDescription: Must be a number between 0 and 10.
    Default: 1
    Description: Specifies the minimum number of EC2 instances in the Web Autoscaling Group.
    Type: String
  WebInstanceType:
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - x1e.xlarge
      - x1e.2xlarge
      - x1e.4xlarge
      - x1e.8xlarge
      - x1e.16xlarge
      - x1e.32xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - h1.2xlarge
      - h1.4xlarge
      - h1.8xlarge
      - h1.16xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - f1.2xlarge
      - f1.16xlarge
      - g2.2xlarge
      - g2.8xlarge
      - g3.4xlarge
      - g3.8xlarge
      - g3.16xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
    Default: t2.micro
    Description: The Amazon EC2 instance type for your web instances.
    Type: String
  WebSecurityGroup:
    Description: Select the web security group.
    Type: AWS::EC2::SecurityGroup::Id

Conditions:
  NumberOfSubnets1:
    !Equals [ 1, !Ref NumberOfSubnets ]
  NumberOfSubnets2:
    !Equals [ 2, !Ref NumberOfSubnets ]
  NumberOfSubnets3:
    !Equals [ 3, !Ref NumberOfSubnets ]
  NumberOfSubnets4:
    !Equals [ 4, !Ref NumberOfSubnets ]
  NumberOfSubnets5:
    !Equals [ 5, !Ref NumberOfSubnets ]
  NumberOfSubnets6:
    !Equals [ 6, !Ref NumberOfSubnets ]
  PHP70:
    !Equals [ 7.0, !Ref PHPVersion ]

Resources:
  WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref WebInstanceRole
  WebInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource:
                  - arn:aws:logs:*:*:*
        - PolicyName: cfn-s3-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - 'arn:aws:s3:::cf-coachella/*'
        - PolicyName: parameter-store-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:Describe*'
                  - 'ssm:Get*'
                  - 'ssm:List*'
                Resource: '*'
        - PolicyName: codedeploy-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Get*'
                  - 's3:List*'
                Resource: '*'
                  # TODO: Limit to only required resources
                  # - !Sub '${CodePipelineBucketArn}/*'
                  # - 'arn:aws:s3:::aws-codedeploy-us-east-2/*'
                  # - 'arn:aws:s3:::aws-codedeploy-us-east-1/*'
                  # - 'arn:aws:s3:::aws-codedeploy-us-west-1/*'
                  # - 'arn:aws:s3:::aws-codedeploy-us-west-2/*'
                  # - 'arn:aws:s3:::aws-codedeploy-ca-central-1/*'
                  # - 'arn:aws:s3:::aws-codedeploy-eu-west-1/*'
                  # - 'arn:aws:s3:::aws-codedeploy-eu-west-2/*'
                  # - 'arn:aws:s3:::aws-codedeploy-eu-west-3/*'
                  # - 'arn:aws:s3:::aws-codedeploy-eu-central-1/*'
                  # - 'arn:aws:s3:::aws-codedeploy-ap-northeast-1/*'
                  # - 'arn:aws:s3:::aws-codedeploy-ap-northeast-2/*'
                  # - 'arn:aws:s3:::aws-codedeploy-ap-southeast-1/*'
                  # - 'arn:aws:s3:::aws-codedeploy-ap-southeast-2/*'
                  # - 'arn:aws:s3:::aws-codedeploy-ap-south-1/*'
                  # - 'arn:aws:s3:::aws-codedeploy-sa-east-1/*'
  WebAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: '60'
      HealthCheckGracePeriod: 120
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref WebLaunchConfiguration70
      MaxSize: !Ref WebAsgMax
      MinSize: !Ref WebAsgMin
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'Web ASG / ', !Ref 'AWS::StackName' ] ]
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref PublicAlbTargetGroupArn
      VPCZoneIdentifier:
        !If
          [ NumberOfSubnets1,
          [ !Select [ 0, !Ref Subnet ] ],
          !If
            [ NumberOfSubnets2,
            [ !Select [ 0, !Ref Subnet ], !Select [ 1, !Ref Subnet ] ],
            !If
              [ NumberOfSubnets3,
              [ !Select [ 0, !Ref Subnet ], !Select [ 1, !Ref Subnet ], !Select [ 2, !Ref Subnet ] ],
              !If
                [ NumberOfSubnets4,
                [ !Select [ 0, !Ref Subnet ], !Select [ 1, !Ref Subnet ], !Select [ 2, !Ref Subnet ], !Select [ 3, !Ref Subnet ] ],
                !If
                  [ NumberOfSubnets5,
                  [ !Select [ 0, !Ref Subnet ], !Select [ 1, !Ref Subnet ], !Select [ 2, !Ref Subnet ], !Select [ 3, !Ref Subnet ], !Select [ 4, !Ref Subnet ] ],
                  [ !Select [ 0, !Ref Subnet ], !Select [ 1, !Ref Subnet ], !Select [ 2, !Ref Subnet ], !Select [ 3, !Ref Subnet ], !Select [ 4, !Ref Subnet ], !Select [ 5, !Ref Subnet ] ]
                  ]
                ]
              ]
            ]
          ]
    CreationPolicy:
      ResourceSignal:
        Count: !Ref WebAsgMin
        Timeout: PT10M
  WebLaunchConfiguration70:
    Condition: PHP70
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Access:
          type: S3
          roleName: !Ref WebInstanceRole
          buckets:
            - 'cf-coachella'
      AWS::CloudFormation::Init:
        configSets:
          deploy_webserver:
            - install_webserver
            - install_aws_ini
            - install_cacheclient
            - install_opcache
            - install_codedeploy_agent
        install_webserver:
          packages:
            yum:
              awslogs: []
              httpd24: []
              mysql56: []
              php70: []
              php70-mysqlnd: []
              php70-pecl-imagick: []
              php70-pecl-memcache: []
        install_aws_ini:
          files:
            /tmp/install_ini_override.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  ini_override_file="/etc/php-7.0.d/20-aws.ini"

                  if [ ! -f "$ini_override_file" ]; then
                    echo "; Enable php.ini overrides for hosting WordPress on AWS" >> "$ini_override_file"
                    echo "memory_limit = 512M" >> "$ini_override_file"
                    echo "post_max_size = 200M" >> "$ini_override_file"
                    echo "upload_max_filesize = 200M" >> "$ini_override_file"
                    echo "max_input_time = 300" >> "$ini_override_file"
                    echo "max_execution_time = 300" >> "$ini_override_file"
                    echo "max_file_uploads = 200" >> "$ini_override_file"
                    echo "max_input_vars = 10000" >> "$ini_override_file"
                  fi
              mode: 000500
              owner: root
              group: root
          commands:
            install_aws_ini:
              command: ./install_ini_override.sh
              cwd: /tmp
              ignoreErrors: true
        install_cacheclient:
          packages:
            yum:
              gcc-c++: []
          files:
            /tmp/install_cacheclient.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  cp '/tmp/artifact/amazon-elasticache-cluster-client.so' /usr/lib64/php/7.0/modules/
                  if [ ! -f /etc/php-7.0.d/50-memcached.ini ]; then
                      touch /etc/php-7.0.d/50-memcached.ini
                  fi
                  sed -i '3i extension=/usr/lib64/php/7.0/modules/amazon-elasticache-cluster-client.so;' /etc/php-7.0.d/50-memcached.ini
                  sed -i '3i extension=igbinary.so;' /etc/php-7.0.d/50-memcached.ini
              mode: 000500
              owner: root
              group: root
          sources:
            /tmp: https://s3.amazonaws.com/cf-coachella/wordpress/config-files/AmazonElastiCacheClusterClient-2.0.1-PHP70-64bit.tar.gz
          commands:
            install_cacheclient:
              command: ./install_cacheclient.sh
              cwd: /tmp
              ignoreErrors: false
        install_opcache:
          packages:
            yum:
              php70-opcache: []
          files:
            /tmp/install_opcache.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  # create hidden opcache directory locally & change owner to apache
                  if [ ! -d /var/www/.opcache ]; then
                    mkdir -p /var/www/.opcache
                  fi

                  # enable opcache in /etc/php-7.0.d/10-opcache.ini
                  sed -i 's/;opcache.file_cache=.*/opcache.file_cache=\/var\/www\/.opcache/' /etc/php-7.0.d/10-opcache.ini
                  sed -i 's/opcache.memory_consumption=.*/opcache.memory_consumption=512/' /etc/php-7.0.d/10-opcache.ini
              mode: 000500
              owner: root
              group: root
            /tmp/opcache-instanceid.php:
              source: https://s3.amazonaws.com/cf-coachella/wordpress/config-files/opcache-instanceid.php
              mode: 000500
              owner: root
              group: root
          commands:
            install_opcache:
              command: ./install_opcache.sh
              cwd: /tmp
              ignoreErrors: false
        install_codedeploy_agent:
          files:
            /tmp/install_codedeploy.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  cd /home/ec2-user

                  until sudo service codedeploy-agent status >/dev/null 2>&1; do
                    sleep 60
                    rm -f codedeploy-agent-install
                    wget -O codedeploy-agent-install https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
                    chmod +x ./codedeploy-agent-install
                    sudo ./codedeploy-agent-install auto
                    sudo service codedeploy-agent restart
                  done
              mode: 000500
              owner: root
              group: root
          commands:
            install_codedeploy:
              command: ./install_codedeploy.sh
              cwd: /tmp
              ignoreErrors: false
    Properties:
      IamInstanceProfile: !Ref WebInstanceProfile
      ImageId: !Ref LatestAmiId
      InstanceMonitoring: true
      InstanceType: !Ref WebInstanceType
      KeyName: !Ref EC2KeyName
      SecurityGroups:
        - !Ref WebSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            yum update -y
            mkdir -p /var/www/wordpress

            if [ -n "${ElasticFileSystem}" ]; then
              mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${ElasticFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /var/www/wordpress
            fi

            /opt/aws/bin/cfn-init --configsets deploy_webserver --verbose --stack ${AWS::StackName} --resource WebLaunchConfiguration70 --region ${AWS::Region}
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource WebAutoScalingGroup --region ${AWS::Region}

Outputs:
  Opcachestatus:
    Value: !Join [ '', [ !Ref PublicAlbHostname, '/opcache-instanceid.php' ] ]
